module RangeTest

include "range"

// Range.inRange
assert Range.inRange(1, 1..5)
assert Range.inRange(3, 5..1)
assert !Range.inRange(5, 1..4)
assert !Range.inRange(10, 1..5)
assert !Range.inRange(-1, 1..5)

assert Range.inRange(1, 5..1)
assert Range.inRange(3, 5..1)
assert !Range.inRange(5, 5..1)
assert !Range.inRange(10, 5..1)
assert !Range.inRange(-1, 5..1)

assert !Range.inRange(1, 1..1)
assert !Range.inRange(3, 1..1)

// Range.forEach
// Note: the lists in these tests are reverse the iteration
// order because we use `...results` to append the lists

let mut results = []
Range.forEach(idx => {
  results = [idx, ...results]
}, 1..5)
assert results == [4, 3, 2, 1]

let mut results = []
Range.forEach(idx => {
  results = [idx, ...results]
}, 5..1)
assert results == [2, 3, 4, 5]

Range.forEach(idx => {
  fail "Shouldn't be called"
}, 1..1)

assert Range.map(toString, 1..5) == ["1", "2", "3", "4"]
assert Range.map(toString, 5..1) == ["5", "4", "3", "2"]
assert Range.map(toString, 1..1) == []

module Inclusive {
  from Range use { module Inclusive as Range }

  // Range.inRange
  assert Range.inRange(1, 1..5)
  assert Range.inRange(3, 1..5)
  assert Range.inRange(5, 1..5)
  assert !Range.inRange(10, 1..5)
  assert !Range.inRange(-1, 1..5)

  assert Range.inRange(1, 5..1)
  assert Range.inRange(3, 5..1)
  assert Range.inRange(5, 5..1)
  assert !Range.inRange(10, 5..1)
  assert !Range.inRange(-1, 5..1)

  assert Range.inRange(1, 1..1)
  assert !Range.inRange(3, 1..1)

  let mut results = []
  Range.forEach(idx => {
    results = [idx, ...results]
  }, 1..5)
  assert results == [5, 4, 3, 2, 1]

  let mut results = []
  Range.forEach(idx => {
    results = [idx, ...results]
  }, 5..1)
  assert results == [1, 2, 3, 4, 5]

  let mut results = []
  Range.forEach(idx => {
    results = [idx, ...results]
  }, 1..1)
  assert results == [1]

  assert Range.map(toString, 1..5) ==
    ["1", "2", "3", "4", "5"]
  assert Range.map(toString, 5..1) ==
    ["5", "4", "3", "2", "1"]
  assert Range.map(toString, 1..1) == ["1"]
}
