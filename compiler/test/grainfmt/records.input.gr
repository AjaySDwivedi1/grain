module Records

include "set"

record Rec {foo: Number, bar: Number}
let x = {foo: 4, bar: 9}

x.foo + x.bar

record Rec1 { foo2: Number, bar2: Number }
record Rec2 { baz2: Rec1 }
let x = { baz2: { foo2: 4, bar2: 9 }, }
x.baz2.bar2

record Rec3 { foo3: Number, bar3: String, baz3: Bool }
let { foo3, _ } = { foo3: 4, bar3: "boo", baz3: true }
foo3

record Long {longField1: Number,longField2: Number,longField3: String,
  longField4: String,
  longField5: String,
}

record Commented {
  name: String,
  address: String,
  age: Number
}

record GraphData<a> { 
        edge: Set.Set<(a,a)>,
    nodes: Set.Set<a>,

} 

record GraphData2<a>  {  
   
        edge: Set.Set<(a,a)>,
   
    nodes: Set.Set<a>, 
} 

record Bucket<k, v> {
  mut key: k,
  mut value: v,
  mut nextkey: Option<Bucket<k, v>>,
}

record Commented { 
  longlonglongnamenamename1: String, 
  longlonglongnamenamename2: String,
  longlonglongnamenamename3: Number,
}

let x: Commented = {
  longlonglongnamenamename1: "A",
  longlonglongnamenamename2: "B",
  longlonglongnamenamename3: 42,
} 

let {
  longlonglongnamenamename1,
  longlonglongnamenamename2,
  longlonglongnamenamename3
} = x

let {
  l1,
  l2,
  l3
} = x

 let s=  { num: 1, var: A,
    str: "" }


 let s=  { num: 1, 
   var: A,
    str: "" }

 let s=  {
    num: 1, var: A,
    str: "" }

let y = {x, longlonglongnamenamename2: 12345, longlonglongnamenamename3: 12345 } 

let y = { ...x, bar: 2 }

let y = {
  ...x,
  bar: 2
}

let y = { ...x, longlonglongnamenamename2: 12345, longlonglongnamenamename3: 12345 }

let y = {...x, longlonglongnamenamename2: 12345,  longlonglongnamenamename3: 12345 }
