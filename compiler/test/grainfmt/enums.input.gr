module Enums

provide enum Instructions {
  MoveNorth(Number),
  MoveSouth(Number),
  MoveEast(Number),
  MoveWest(Number),
  TurnLeft(Number), 
  TurnRight(Number),
  MoveForward(Number),
}


provide enum Ship {
  Ship(Number, Number, Number)
}

enum ParsedRegularExpression {
  RENever,
  REEmpty,
  REAny,
  REStart,
  REEnd,
  RELineStart,
  RELineEnd,
  REWordBoundary,
  RENotWordBoundary,
  RELiteral(Char),
  RELiteralString(String),
  REAlts(ParsedRegularExpression, ParsedRegularExpression),
  RESequence(List<ParsedRegularExpression>, Bool),
  REGroup(ParsedRegularExpression, Number),
  RERepeat(ParsedRegularExpression, Number, Option<Number>, Bool),
  REMaybe(ParsedRegularExpression, Bool),
  REConditional(ParsedRegularExpression, ParsedRegularExpression, Option<ParsedRegularExpression>, Number, Number, Bool),
  RELookahead(ParsedRegularExpression, Bool, Number, Number),
  RELookbehind(ParsedRegularExpression, Bool, Box<Number>, Box<Number>, Number, Number),
  RECut(ParsedRegularExpression, Number, Number, Bool),
  REReference(Number, Bool),
  RERange(List<(Number, Number)>),
  REUnicodeCategories(Bool)
}


record Node { node: AstValue }

and enum AstValue { NodeValue(Node), StringValue(String) }
