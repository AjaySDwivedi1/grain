module Infix

let trimString = (str: String, end: Bool) => {
  let chars = [>] and charsLength = 0
  let mut i = 0 and offset = 1
 
  for (; i < charsLength && i > -1; i += offset) {
    let currentChar = chars[i];
    if (
      currentChar != '\u{0009}'  &&
      currentChar != '\u{000B}'  &&
      currentChar != '\u{000C}'  &&
      currentChar != '\u{0020}'  &&
      currentChar != '\u{00A0}'  &&
      currentChar != '\u{FEFF}'  &&
      currentChar != '\n' &&
      currentChar != '\r'
    ) break
  }
  if (end) slice(0, i+1, str)
  else slice(i, charsLength, str)
}

(||+)
(||^)
(&&*&^%)
(|*)
(^^^)
(&-)
(==!)
(==$)
(==*==)
(!==^)
(<<<<<)
(<%>)
(<=>)
(>>>>)
(>>>>>>>>)
(><><><)
(+==)
(+!)
(++!)
(+-+)
(**//**)
(**)
(??)
(???)
(+.)
(-.)
(*.)
(/.)
(>>=)
(|>)
(>:)
(%%)
(===)
(!==)
(==?)
(&?)
(++)
(--)
(^*^)
(^-^)
